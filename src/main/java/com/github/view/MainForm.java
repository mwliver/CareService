package com.github.view;

import com.github.algorithm.application.ApplicationService;
import com.github.algorithm.application.DiseaseEnum;
import com.github.algorithm.lemke_howson.MatrixService;
import com.github.model.Application;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Scope;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Service;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Copyright & Author
 * michal
 */
@Service
@Scope("prototype")
public class MainForm extends JFrame {

    @Autowired
    ApplicationService applicationService;

    @Autowired
    MatrixService matrixService;

    private JPanel panel1;
    private JComboBox comboBox1;
    private JButton dalejButton;

    private Application application = new Application();

    public MainForm() {
        add(panel1);

        for (DiseaseEnum diseaseEnum : DiseaseEnum.values()) {
            comboBox1.addItem(diseaseEnum);
        }

        dalejButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                DiseaseEnum disease = (DiseaseEnum) comboBox1.getSelectedItem();
                application.setDisease(disease);

                if (application.getDisease() == null) {
                    return;
                }

                // Ustaw domyślne wartości w macierzach
                applicationService.getStrategyList(application);
                application.setFirstMatrix(matrixService.getDefaultMatrix(application));
                application.setSecondMatrix(matrixService.getDefaultMatrix(application));
                application.setThirdMatrix(matrixService.getDefaultMatrix(application));

                ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml", "beans-datasource.xml");
                MatrixPanel matrixPanel = (MatrixPanel) context.getBean("matrixPanel", application);
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                } catch (IllegalAccessException | ClassNotFoundException | UnsupportedLookAndFeelException | InstantiationException e1) {
                    e1.printStackTrace();
                }
                matrixPanel.setContentPane(matrixPanel.getContentPane());
                matrixPanel.pack();
                matrixPanel.setSize(700, 500);
                matrixPanel.setLocation((Toolkit.getDefaultToolkit().getScreenSize().width - matrixPanel.getSize().width) / 2, (Toolkit.getDefaultToolkit().getScreenSize().height - matrixPanel.getSize().height) / 2);
                matrixPanel.setVisible(true);
                matrixPanel.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

                MainForm.this.dispose();
                repaint();
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setVisible(true);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Wybierz chorobę którą chcesz rozważyć");
        panel2.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        comboBox1 = new JComboBox();
        panel2.add(comboBox1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        dalejButton = new JButton();
        dalejButton.setText("Dalej");
        panel3.add(dalejButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }
}
